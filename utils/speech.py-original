import pyttsx3
import speech_recognition as sr
from config import Config
from .vosk_recognizer import VoskRecognizer
from .whisper_recognizer import WhisperRecognizer

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
vosk_recognizer = VoskRecognizer() if Config.RECOGNITION_TYPE == 'vosk' else None
whisper_recognizer = WhisperRecognizer() if Config.RECOGNITION_TYPE == 'whisper' else None

# –î–ª—è Google —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
if Config.RECOGNITION_TYPE == 'google':
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source, duration=1)

# TTS
try:
    tts_engine = pyttsx3.init()
    voices = tts_engine.getProperty('voices')
    if len(voices) > 1:
        tts_engine.setProperty('voice', voices[1].id)
    tts_engine.setProperty('rate', Config.VOICE_RATE)
    tts_engine.setProperty('volume', Config.VOICE_VOLUME)
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
    tts_engine = None

def listen():
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if Config.RECOGNITION_TYPE == 'vosk' and vosk_recognizer:
        return vosk_recognizer.listen_vosk()
    elif Config.RECOGNITION_TYPE == 'whisper' and whisper_recognizer:
        return whisper_recognizer.listen_whisper()
    else:
        return listen_google()

def listen_google():
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Google"""
    try:
        with microphone as source:
            print("üé§ –°–ª—É—à–∞—é (Google)...")
            audio = recognizer.listen(source, timeout=3, phrase_time_limit=5)
        
        try:
            query = recognizer.recognize_google(audio, language=f'{Config.LANGUAGE}-RU')
            print(f"üë§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {query}")
            return query.lower()
        except sr.UnknownValueError:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return ""
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Google: {e}")
            return ""
            
    except sr.WaitTimeoutError:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞")
        return ""
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {e}")
        return ""

def say(text):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏"""
    print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {text}")
    if tts_engine:
        try:
            tts_engine.say(text)
            tts_engine.runAndWait()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
    else:
        print("‚ö†Ô∏è  –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")