import logging
import os
from datetime import datetime
from config import Config

def setup_logger():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    log_dir = os.path.dirname(Config.LOG_FILE)
    if log_dir and not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('voice_assistant')
    logger.setLevel(getattr(logging, Config.LOG_LEVEL.upper()))
    
    # –§–∞–π–ª–æ–≤—ã–π handler (–¥–æ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü)
    file_handler = logging.FileHandler(Config.LOG_FILE, mode='a', encoding='utf-8')
    file_handler.setFormatter(formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    # –î–æ–±–∞–≤–ª—è–µ–º handlers
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
    logger.info("=" * 50)
    logger.info("üöÄ –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    logger.info(f"üìù –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {Config.LOG_LEVEL}")
    logger.info(f"üíæ –§–∞–π–ª –ª–æ–≥–æ–≤: {Config.LOG_FILE}")
    logger.info("=" * 50)
    
    return logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
logger = setup_logger()

def log_command(user_text, assistant_response):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –æ—Ç–≤–µ—Ç–∞"""
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_text}")
    logger.info(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_response}")
    logger.info("-" * 30)

def log_error(error_message, exception=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    if exception:
        logger.error(f"‚ùå {error_message}: {exception}")
    else:
        logger.error(f"‚ùå {error_message}")

def log_debug(message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.debug(f"üêõ {message}")

def log_info(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    logger.info(f"‚ÑπÔ∏è {message}")