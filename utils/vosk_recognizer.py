import json
import vosk
import sounddevice as sd
import numpy as np
from config import Config
import subprocess
import tempfile
import os
from utils.logger import logger

class VoskRecognizer:
    def __init__(self):
        self.model = vosk.Model(Config.VOSK_MODEL_PATH)
        self.sample_rate = 16000
        self.rec = vosk.KaldiRecognizer(self.model, self.sample_rate)
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        self.devices_priority = [
            'hw:CARD=PRO,DEV=0',      # –û—Å–Ω–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - –†–ê–ë–û–¢–ê–ï–¢!
            'plughw:CARD=PRO,DEV=0',  # –° –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
            'sysdefault:CARD=PRO',    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        ]

    def listen_vosk(self):
        """–û—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Vosk"""
        logger.debug("üé§ –°–ª—É—à–∞—é (Vosk)...")
        
        
        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
        for device in self.devices_priority:
            try:
                result = self.record_with_arecord_device(device)
                if result and self.is_valid_command(result):
                    print(f"‚úÖ –£—Å–ø–µ—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º: {device}")
                    return result
                elif result:
                    print(f"‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device} —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ: '{result}' (–Ω–µ –∫–æ–º–∞–Ω–¥–∞)")
                else:
                    print(f"‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–æ —Ä–µ—á—å")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º {device}: {e}")
                continue
        
        # –ï—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –¥–∞–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–æ–±—É–µ–º fallback
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏...")
        return self.record_with_sounddevice_fallback()

    def is_valid_command(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"""
        if not text or len(text.strip()) < 2:
            return False
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –±—É–∫–≤—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–≤—É–∫–∏
        ignored_patterns = ['–∞', '–æ', '—É', '—ç', '—ã', '–∏', '–∫', '–Ω–∞', '–¥–∞', '–Ω–µ—Ç']
        if text.lower() in ignored_patterns:
            return False
            
        return True

    def record_with_arecord_device(self, device):
        """–ó–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ arecord —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        try:
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmpfile:
                temp_path = tmpfile.name

            cmd = [
                'arecord',
                '-d', '3',           # –£–º–µ–Ω—å—à–∏–ª–∏ –¥–æ 3 —Å–µ–∫—É–Ω–¥
                '-f', 'S16_LE',
                '-r', '16000',
                '-c', '1',
                '-D', device,
                '-q',
                temp_path
            ]

            process = subprocess.run(cmd, check=True, timeout=4, 
                                   stderr=subprocess.PIPE, stdout=subprocess.PIPE)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(temp_path)
            if file_size <= 44:
                os.unlink(temp_path)
                return ""

            with open(temp_path, 'rb') as f:
                audio_data = f.read()
            
            os.unlink(temp_path)

            if len(audio_data) > 44:
                audio_bytes = audio_data[44:]
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
                chunk_size = 4000
                for i in range(0, len(audio_bytes), chunk_size):
                    chunk = audio_bytes[i:i + chunk_size]
                    self.rec.AcceptWaveform(chunk)
                
                result = json.loads(self.rec.Result())
                text = result.get('text', '').lower().strip()
                
                if text:
                    print(f"üë§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                    return text

            return ""

        except subprocess.TimeoutExpired:
            return ""
        except subprocess.CalledProcessError as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            if "–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∞" not in str(e):
                print(f"‚ùå –û—à–∏–±–∫–∞ arecord ({device}): {e}")
            return ""
        except Exception as e:
        #    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({device}): {e}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º {device}: {e}")
            return ""

    def record_with_sounddevice_fallback(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ sounddevice"""
        try:
            duration = 3
            device_sample_rate = 48000
            
            audio_data = sd.rec(int(duration * device_sample_rate),
                               samplerate=device_sample_rate,
                               channels=1,
                               dtype='int16',
                               device=0)
            sd.wait()
            
            # Resampling: 48000 -> 16000
            audio_data_16k = audio_data[::3].flatten()
            audio_bytes = audio_data_16k.tobytes()
            
            if self.rec.AcceptWaveform(audio_bytes):
                result = json.loads(self.rec.Result())
                text = result.get('text', '').lower().strip()
                if text and self.is_valid_command(text):
                    print(f"üë§ –í—ã —Å–∫–∞–∑–∞–ª–∏ (fallback): {text}")
                    return text
            
            return ""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ sounddevice fallback: {e}")
            return ""