import json
import vosk
import sounddevice as sd
import numpy as np
from config import Config

class VoskRecognizer:
    def __init__(self):
        self.model = vosk.Model(Config.VOSK_MODEL_PATH)
        self.sample_rate = 16000  # Vosk —Ç—Ä–µ–±—É–µ—Ç –∏–º–µ–Ω–Ω–æ 16000 Hz
        self.rec = vosk.KaldiRecognizer(self.model, self.sample_rate)
        
    def listen_vosk(self):
        """–û—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Vosk"""
        print("üé§ –°–ª—É—à–∞—é (Vosk)...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 0 (USB MIC PRO) —Å resampling
            duration = 5  # seconds
            
            # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º sample rate –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            audio_data = sd.rec(int(duration * self.sample_rate), 
                               samplerate=self.sample_rate, 
                               channels=1, 
                               dtype='int16',
                               device=0)  # USB MIC PRO
            sd.wait()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ bytes –¥–ª—è Vosk
            audio_bytes = audio_data.tobytes()
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            if self.rec.AcceptWaveform(audio_bytes):
                result = json.loads(self.rec.Result())
                text = result.get('text', '').lower()
                if text:
                    print(f"üë§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
                    return text
            
            return ""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Vosk —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            return self.listen_vosk_alternative()
    
    def listen_vosk_alternative(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ —Å resampling"""
        try:
            print("üé§ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏...")
            
            # –ó–∞–ø–∏—à–µ–º —Å sample rate —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–æ—Ç–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
            original_sample_rate = 48000
            duration = 5
            
            audio_data = sd.rec(int(duration * original_sample_rate),
                               samplerate=original_sample_rate,
                               channels=1,
                               dtype='int16',
                               device=0)
            sd.wait()
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ sample rate (–¥–µ—Ü–∏–º–∞—Ü–∏—è)
            # 48000 -> 16000: –±–µ—Ä–µ–º –∫–∞–∂–¥—ã–π 3–π sample
            audio_data_16k = audio_data[::3]
            audio_bytes = audio_data_16k.tobytes()
            
            if self.rec.AcceptWaveform(audio_bytes):
                result = json.loads(self.rec.Result())
                text = result.get('text', '').lower()
                if text:
                    print(f"üë§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
                    return text
            
            return ""
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")
            return ""