import speech_recognition as sr
import sounddevice as sd
import numpy as np
import os
from utils.logger import logger
from config import Config
from .vosk_recognizer import VoskRecognizer
from .whisper_recognizer import WhisperRecognizer

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
vosk_recognizer = VoskRecognizer() if Config.RECOGNITION_TYPE == 'vosk' else None
whisper_recognizer = WhisperRecognizer() if Config.RECOGNITION_TYPE == 'whisper' else None

# –î–ª—è Google —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
recognizer = None
if Config.RECOGNITION_TYPE == 'google':
    recognizer = sr.Recognizer()

# TTS –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
tts_engine = None

def listen():
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.debug("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è...")

    if Config.RECOGNITION_TYPE == 'vosk' and vosk_recognizer:
        return vosk_recognizer.listen_vosk()
    elif Config.RECOGNITION_TYPE == 'whisper' and whisper_recognizer:
        return whisper_recognizer.listen_whisper()
    elif Config.RECOGNITION_TYPE == 'google':
        return listen_google()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {Config.RECOGNITION_TYPE}")
        return ""

def listen_google():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ pyaudio"""
    try:
        print("üé§ –°–ª—É—à–∞—é (Google alternative)...")

        # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é sounddevice
        sample_rate = 16000
        duration = 5  # seconds

        audio_data = sd.rec(int(duration * sample_rate),
                           samplerate=sample_rate,
                           channels=1,
                           dtype='int16',
                           device=0)  # USB MIC PRO
        sd.wait()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è speech_recognition
        audio_data_bytes = audio_data.flatten().tobytes()
        
        # –°–æ–∑–¥–∞–µ–º AudioData –æ–±—ä–µ–∫—Ç –¥–ª—è speech_recognition
        audio = sr.AudioData(audio_data_bytes, sample_rate, 2)

        try:
            query = recognizer.recognize_google(audio, language='ru-RU')
            print(f"üë§ –í—ã —Å–∫–∞–∑–∞–ª–∏: {query}")
            return query.lower()
        except sr.UnknownValueError:
            print("‚ùå –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
            return ""
        except sr.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Google: {e}")
            return ""

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏: {e}")
        return ""

def say(text):
    """–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤—ã–≤–æ–¥"""
    logger.info(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {text}")
    print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {text}")
    # –ó–≤—É–∫–æ–≤–æ–π –≤—ã–≤–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è